# -*- coding: utf-8 -*-
from __future__ import unicode_literals
from math import radians, cos, sin, asin, sqrt
from django.http import HttpResponse
from django.views.decorators.csrf import csrf_exempt
from rest_framework.renderers import JSONRenderer
from rest_framework.parsers import JSONParser
from car.models import Car
from car.models import Credentials
from .models import Configuration
from car.serializers import CarSerializer
from car.serializers import CredentialsSerializer
from car.serializers import ConfigurationSerializer
import requests
import json

API_KEY = "AIzaSyCJl2jz_kpq5w-MxQzIZd669o7nq_i1-TE"

class JSONResponse(HttpResponse):
    """
    An HttpResponse that renders its content into JSON.
    """
    def __init__(self, data, **kwargs):
        content = JSONRenderer().render(data)
        kwargs['content_type'] = 'application/json'
        super(JSONResponse, self).__init__(content, **kwargs)

@csrf_exempt
def car_list(request):
	if request.method == 'GET':
		car = Car.objects.all()
		serializer = CarSerializer(car, many=True)
		return JSONResponse(serializer.data)
		
	elif request.method == 'POST':
		data = JSONParser().parse(request)
		data_old = None
		for x in Car.objects.all():
			if x.uid == data['uid']:
				data_old = x
				x.delete()
		serializer = CarSerializer(data=data)
		if serializer.is_valid():
			serializer.save()
			sendNotification(data,data_old)
			return JSONResponse(serializer.data, status=201)
		return JSONResponse(serializer.errors, status=400)
		
		
def sendNotification(car1, car1_old):
	if(len(Car.objects.all()) > 1):
		for x in Credentials.objects.all():
			if car1['uid'] != x.uid:
				car2 = filter(lambda y: y.uid == x.uid, Car.objects.all())
				radius = 1.00 # in kilometer
				distance = haversine(float(car1['latitude']), float(car1['longitude']), float(car2[0].latitude), float(car2[0].longitude))
				if distance <= radius and car1_old != None:
					isBehind = behind(float(car1['latitude']), float(car1['longitude']), float(car2[0].latitude), float(car2[0].longitude), float(car1['latitude_dst']), float(car1['latitude_dst']))
					print isBehind
					send_alert_accident(float(car1['x']), float(car1['z']), float(car2[0].x), float(car2[0].z), x.tokenId, isBehind)
					if nearby(float(car1['latitude']), float(car1['longitude']), float(car1_old.latitude), float(car1_old.longitude), float(car2[0].latitude), float(car2[0].longitude)):
						print('esta cerca')
						carConfiguration = filter(lambda y: y.uid == x.uid, Configuration.objects.all())
						if(carConfiguration[0].alertAccident):
							send_alert_accident(float(car1['x']), float(car1['z']), float(car2[0].x), float(car2[0].z), o, x.tokenId, isBehind)
					else:
						print('no esta cerca')


def haversine(lat1, lon1, lat2, lon2):
    """
    Calculate the great circle distance between two points 
    on the earth (specified in decimal degrees)
    """
    # convert decimal degrees to radians 
    lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])

    # haversine formula 
    dlon = lon2 - lon1 
    dlat = lat2 - lat1 
    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2
    c = 2 * asin(sqrt(a)) 
    r = 6371 # Radius of earth in kilometers. Use 3956 for miles
    return c * r
    
def orientation(lat1, lon1, lat2, lon2):
	lat_diff = lat2 - lat1
	lon_diff = lon2 - lon1
	
	if(lat_diff > 0):
		if(lon_diff > 0):
			return 'izquierda'
		else:
			return 'abajo'
	else:
		if(lon_diff > 0):
			return 'arriba'
		else:
			return 'derecha'
			
def nearby(lat1, lon1, lat1_old, lon1_old, lat2, lon2):
	dis = haversine(lat2,lon2,lat1, lon1)
	dis_old = haversine(lat2,lon2,lat1_old,lon1_old)
	
	if(dis < dis_old):
		return True
	else:
		return False	

def behind(lat1, lon1, lat2, lon2, lat1_dst, lon1_dst):
	if(lat1_dst == 0 or lon1_dst == 0):
		return None
	else:
		dis1 = haversine(lat1,lon1,lat1_dst,lon1_dst)
		dis2 = haversine(lat2,lon2,lat1_dst,lon1_dst)
		
		if(dis1 < dis2):
			return True
		else:
			return False

def send_alert_accident(x1,z1,x2,z2,to,behind):
	if((-1.5 > x1 > -4) and (-1.5 > x2 > -4)):
		if(z2+1 > z1 > z2-1):
			print behind
			if(behind != None):
				if(behind):
					body = {"to": to, "notification": {"title": "ALERTA POR POSIBLE COLISION TRASERA","body": "Un coche a x metros se aproxima a x k/h por detras"}}
				else:
					body = {"to": to, "notification": {"title": "HAY UN COCHE DELANTE","body": ""}}
			else:
				body = {"to": to, "notification": {"title": "HAY UN COCHE CERCA","body": ""}}				
		else:
			body = {"to": to, "notification": {"title": "ALERTA POR POSIBLE COLISION DELATERA","body": "Un coche a x metros se aproxima a x k/h por delante"}}
			
		print body
		headers = {"content-type": "application/json", "Authorization": "key=AAAApRo1WOU:APA91bFro_aJI-puTK_zRwdMtPnNxgfQPbrC0QE6qaMjpHHAvYXnhhAUI3Pposz8fQJfE3GgxXv1J0i1SsmnHFSETOZQ-0V6QjuUZaQRij9UwE1St7C1I7xMcLtNApGe0_NPc0EkNBgG"}
		url = "https://fcm.googleapis.com/fcm/send"
		#requests.post(url, data = json.dumps(body), headers=headers)

@csrf_exempt
def credential_list(request):
	if request.method == 'GET':
		credential = Credentials.objects.all()
		serializer = CredentialsSerializer(credential, many=True)
		return JSONResponse(serializer.data)
		
	elif request.method == 'POST':
		data = JSONParser().parse(request)
		for x in Credentials.objects.all():
			if x.uid == data['uid']:
				x.delete()
		serializer = CredentialsSerializer(data=data)
		if serializer.is_valid():
			serializer.save()
			return JSONResponse(serializer.data, status=201)
		return JSONResponse(serializer.errors, status=400)
		
@csrf_exempt
def configuration_list(request):
	if request.method == 'GET':
		configuration = Configuration.objects.all()
		serializer = ConfigurationSerializer(configuration, many=True)
		return JSONResponse(serializer.data)
		
	elif request.method == 'POST':
		data = JSONParser().parse(request)
		for x in Configuration.objects.all():
			if x.uid == data['uid']:
				x.delete()
		serializer = ConfigurationSerializer(data=data)
		if serializer.is_valid():
			serializer.save()
			return JSONResponse(serializer.data, status=201)
		return JSONResponse(serializer.errors, status=400)
		

def speedLimit(lat, lon):
	url = "https://roads.googleapis.com/v1/speedLimits?path=lat,lon&key=API_KEY"
	requests.get(url)
